package Advanced_Set_Theory;

public class Set_ {
    /*
        Set要用到的常用方法，基本上就是Collection提供的！！
        自己几乎没有额外的新增一些常用功能
     */
    /*
        哈希值：
            就是一个int类型的数值，Java中每个对象都有一个哈希值
            java中的所有对象，都可以调用Object类提供的hashCode方法，返回该对象自己的哈希值

            public int hashCode();  返回对象的哈希码值

        对象哈希值的特点：
            同一个对象多次调用hashCode()方法返回的哈希值是相同的
            不同的对象，它们的哈希值一般不相同，但也有可能相同(哈希碰撞)
     */
    /*
        HashSet集合的底层原理：
            基于哈希表实现的
            哈希表是一种增删改查数据，性能都较好的数据结构

        哈希表
            JDK8之前，哈希表=数组+链表
                1.创建一个默认长度16的数组，默认加载因子为0.75，数组名table
                2.使用元素的哈希值对数组的长度求余计算除应存入的位置
                3.判断当前位置是否为null，如果是null直接存入
                4.如果不为null，表示有元素，则调用equals方法比较
                    相等，则不存；不相等，则存入数组
                    JDK8前，新元素存入数组，占用老元素位置，老元素挂下面
                    JDK8后，新元素直接挂在老元素下面
            JDK8之后，哈希表=数组+链表+红黑树
                当数组长度超过8，且数组长度>=64时。自动将链表转为红黑树
     */
    /*
        LinkedHashSet底层原理
            依然是基于哈希表（数组、链表、红黑树）实现的
            但是，每个元素都额外的多了一个双链表的机制记录它前后的元素位置
     */
    /*
        TreeSet：
            特点：不重复，无索引，可排序（默认升序排序，按照元素的大小，由小到大排序）
            底层是基于红黑树实现的排序

        注意：
            对于数值类型：Integer、Double，默认按照数值本身大小进行升序排序
            对于字符串类型：默认按照首字符的编号升序排序
            对于自定义类型如Student对象，TreeSet默认是无法直接排序的

        自定义排序规则：
            TreeSet集合存储自定义类型的对象时，必须指定规则，支持如下两种方式来指定比较规则
                方式一：
                    让自定义对象实现Comparable接口，重写里面的compareTo方法来指定比较规则
                方式二：
                    通过调用TreeSet集合有参数构造器，可以设置Comparator对象（比较器对象，用于指定比较规则）
                    public TreeSet(Comparator<? super E> comparator)
     */
}
